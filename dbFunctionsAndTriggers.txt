CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalCreated()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
DECLARE
  wakeupMinutes TEXT;
  wakeupHour TEXT;
  targetDay INTEGER;
  targetMonth INTEGER;
BEGIN
  IF NEW.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;

  SELECT 
    SPLIT_PART("wakeupTime", ':', 2),
    SPLIT_PART("wakeupTime", ':', 1)
  INTO wakeupMinutes, wakeupHour
  FROM "Profile"
  WHERE "scheduleID" = NEW."scheduleID";

  SELECT 
    EXTRACT(DAY FROM (NEW."targetDate"::DATE + INTERVAL '1 day')),
    EXTRACT(MONTH FROM (NEW."targetDate"::DATE + INTERVAL '1 day'))
  INTO targetDay, targetMonth;

  PERFORM cron.schedule(
    FORMAT('updateToFailed %s %s %s %s', 
      wakeupMinutes, 
      wakeupHour, 
      targetDay, 
      targetMonth
    ), 
    FORMAT('%s %s %s %s *', 
      wakeupMinutes, 
      wakeupHour, 
      targetDay, 
      targetMonth
    ), 
    FORMAT('UPDATE "Goal" SET state = ''failed'' WHERE id = %s;', NEW.id));
  
  RETURN NEW;
END;
$$

CREATE TRIGGER creationOfGoalUpdatesStats
  AFTER INSERT ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalCreated();

CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalUpdated()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
DECLARE
  oldWakeupMinutes TEXT;
  oldWakeupHour TEXT;
  oldTargetDay INTEGER;
  oldTargetMonth INTEGER;
  wakeupMinutes TEXT;
  wakeupHour TEXT;
  targetDay INTEGER;
  targetMonth INTEGER;
BEGIN
  IF NEW.state = 'active' AND OLD.state = 'waiting' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;

  IF NEW.state = 'completed' AND OLD.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" - 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";

    UPDATE "GoalStatistics"
    SET "goalsCompleted" = "goalsCompleted" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;

  SELECT 
    SPLIT_PART("wakeupTime", ':', 2),
    SPLIT_PART("wakeupTime", ':', 1)
  INTO oldWakeupMinutes, oldWakeupHour
  FROM "Profile"
  WHERE "scheduleID" = OLD."scheduleID";

  SELECT 
    EXTRACT(DAY FROM (OLD."targetDate"::DATE + INTERVAL '1 day')),
    EXTRACT(MONTH FROM (OLD."targetDate"::DATE + INTERVAL '1 day'))
  INTO oldTargetDay, oldTargetMonth;

  SELECT 
    SPLIT_PART("wakeupTime", ':', 2),
    SPLIT_PART("wakeupTime", ':', 1)
  INTO wakeupMinutes, wakeupHour
  FROM "Profile"
  WHERE "scheduleID" = NEW."scheduleID";

  SELECT 
    EXTRACT(DAY FROM (NEW."targetDate"::DATE + INTERVAL '1 day')),
    EXTRACT(MONTH FROM (NEW."targetDate"::DATE + INTERVAL '1 day'))
  INTO targetDay, targetMonth;

  PERFORM cron.unschedule(
    FORMAT('updateToFailed %s %s %s %s', 
      oldWakeupMinutes, 
      oldWakeupHour, 
      oldTargetDay, 
      oldTargetMonth
    )
  );

  PERFORM cron.schedule(
    FORMAT('updateToFailed %s %s %s %s *', 
      wakeupMinutes, 
      wakeupHour, 
      targetDay, 
      targetMonth
    ), 
    FORMAT('%s %s %s %s *', 
      wakeupMinutes, 
      wakeupHour, 
      targetDay, 
      targetMonth
    ), 
    FORMAT('UPDATE "Goal" SET state = ''failed'' WHERE id = %s;', NEW.id));
  RETURN NEW;
END;
$$

CREATE TRIGGER updateOfGoalUpdatesStats
  AFTER UPDATE ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalUpdated();

CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalDeleted()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
DECLARE
  wakeupMinutes TEXT;
  wakeupHour TEXT;
  targetDay INTEGER;
  targetMonth INTEGER;
BEGIN
  IF OLD.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" - 1
    WHERE "GoalStatistics"."scheduleID" = OLD."scheduleID";
  END IF;

  IF OLD.state = 'completed' THEN
    UPDATE "GoalStatistics"
    SET "goalsCompleted" = "goalsCompleted" - 1
    WHERE "GoalStatistics"."scheduleID" = OLD."scheduleID";
  END IF;

  SELECT 
    SPLIT_PART("wakeupTime", ':', 2),
    SPLIT_PART("wakeupTime", ':', 1)
  INTO wakeupMinutes, wakeupHour
  FROM "Profile"
  WHERE "scheduleID" IN (
    SELECT "scheduleID" FROM "Goal" WHERE id = OLD.id
  );

  SELECT 
    EXTRACT(DAY FROM ("targetDate"::DATE + INTERVAL '1 day')),
    EXTRACT(MONTH FROM ("targetDate"::DATE + INTERVAL '1 day'))
  INTO targetDay, targetMonth
  FROM "Goal" 
  WHERE id = OLD.id;

  PERFORM cron.unschedule(
          FORMAT('updateToFailed %s %s %s %s', 
            wakeupMinutes, 
            wakeupHour, 
            targetDay, 
            targetMonth
          )
  )
  RETURN OLD;
END;
$$

CREATE TRIGGER deleteOfGoalUpdatesStats
  AFTER DELETE ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalDeleted();
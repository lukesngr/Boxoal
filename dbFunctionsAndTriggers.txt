CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalCreated()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
  IF NEW.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;
END;
$$

CREATE TRIGGER creationOfGoalUpdatesStats
  AFTER INSERT ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalCreated();

CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalUpdated()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
  IF NEW.state = 'active' AND OLD.state = 'waiting' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;

  IF NEW.state = 'completed' AND OLD.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" - 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";

    UPDATE "GoalStatistics"
    SET "goalsCompleted" = "goalsCompleted" + 1
    WHERE "GoalStatistics"."scheduleID" = NEW."scheduleID";
  END IF;
  RETURN NEW;
END;
$$

CREATE TRIGGER updateOfGoalUpdatesStats
  AFTER UPDATE ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalUpdated();

CREATE OR REPLACE FUNCTION updateGoalStatsWhenGoalDeleted()
  RETURNS TRIGGER
  LANGUAGE PLPGSQL
  AS
$$
BEGIN
  IF OLD.state = 'active' THEN
    UPDATE "GoalStatistics"
    SET "goalsActive" = "goalsActive" - 1
    WHERE "GoalStatistics"."scheduleID" = OLD."scheduleID";
  END IF;

  IF OLD.state = 'completed' THEN
    UPDATE "GoalStatistics"
    SET "goalsCompleted" = "goalsCompleted" - 1
    WHERE "GoalStatistics"."scheduleID" = OLD."scheduleID";
  END IF;
  RETURN OLD;
END;
$$

CREATE TRIGGER deleteOfGoalUpdatesStats
  AFTER DELETE ON "Goal"
  FOR EACH ROW
  EXECUTE FUNCTION updateGoalStatsWhenGoalDeleted();

WITH wakeupUnit AS (
    SELECT 
        SPLIT_PART("wakeupTime", ':', 2) as wakeupMinutes, 
        SPLIT_PART("wakeupTime", ':', 1) AS wakeupHour 
    FROM "Profile"
    WHERE "scheduleID" IN (
        SELECT "scheduleID" FROM "Goal" WHERE id = 1
    )
),
dayMonth AS (
    SELECT 
        EXTRACT(DAY FROM ("targetDate"::DATE + INTERVAL '1 day')) AS day,  -- Added +1 day
        EXTRACT(MONTH FROM ("targetDate"::DATE + INTERVAL '1 day')) AS month 
    FROM "Goal" 
    WHERE id = 1
)
SELECT 
    cron.schedule(
        FORMAT('%s %s %s %s *', 
               w.wakeupMinutes, 
               w.wakeupHour, 
               d.day, 
               d.month
        ), 
        'UPDATE "Goal" SET state = ''failed'' WHERE id = 1;'  -- Fixed: escaped quotes
    )
FROM wakeupUnit w, dayMonth d;